[
  {
    "line": 1,
    "elements": [
      {
        "start_timestamp": "2023-11-29T15:04:34.617Z",
        "line": 3,
        "name": "Customer dynamically selects locations for battery replacements",
        "description": "",
        "id": "battery-replacements-and-dynamically-set-the-battery-level-configuration;customer-dynamically-selects-locations-for-battery-replacements",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16272800,
              "status": "passed"
            },
            "line": 4,
            "name": "the customer has access to the cloud platform",
            "match": {
              "location": "stepdefinition.Select_Location()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 756900,
              "status": "passed"
            },
            "line": 5,
            "name": "the customer dynamically selects specific locations for battery replacements",
            "match": {
              "location": "stepdefinition.Select_Location_when()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 289900,
              "status": "passed"
            },
            "line": 6,
            "name": "the system should use these selected locations for battery replacements",
            "match": {
              "location": "stepdefinition.Select_Location_Then()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:34.658Z",
        "line": 9,
        "name": "Customer dynamically sets battery level threshold configuration",
        "description": "",
        "id": "battery-replacements-and-dynamically-set-the-battery-level-configuration;customer-dynamically-sets-battery-level-threshold-configuration",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 387400,
              "status": "passed"
            },
            "line": 10,
            "name": "the customer has access to the cloud platform",
            "match": {
              "location": "stepdefinition.Select_Location()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 632600,
              "status": "passed"
            },
            "line": 11,
            "name": "the customer dynamically sets the battery level configuration",
            "match": {
              "location": "stepdefinition.Set_Location_when()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 448400,
              "status": "passed"
            },
            "line": 12,
            "name": "the system should use this configuration for monitoring battery levels",
            "match": {
              "location": "stepdefinition.Set_Location_then()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:34.661Z",
        "line": 14,
        "name": "LED blinks when battery level is below the threshold in selected locations",
        "description": "",
        "id": "battery-replacements-and-dynamically-set-the-battery-level-configuration;led-blinks-when-battery-level-is-below-the-threshold-in-selected-locations",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 478500,
              "status": "passed"
            },
            "line": 15,
            "name": "the battery level of a logger is below the dynamically set threshold",
            "match": {
              "location": "stepdefinition.battery()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 211700,
              "status": "passed"
            },
            "line": 16,
            "name": "the logger is in a location selected for battery replacements",
            "match": {
              "location": "stepdefinition.location()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 202900,
              "status": "passed"
            },
            "line": 17,
            "name": "the system checks the battery level",
            "match": {
              "location": "stepdefinition.Set_level()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 199900,
              "status": "passed"
            },
            "line": 18,
            "name": "the LED outside the logger should blink",
            "match": {
              "location": "stepdefinition.Set_blink()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 245500,
              "status": "passed"
            },
            "line": 19,
            "name": "the LED in other locations should remain off",
            "match": {
              "location": "stepdefinition.Set_off()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:34.667Z",
        "line": 21,
        "name": "Customer replaces the battery in selected locations",
        "description": "",
        "id": "battery-replacements-and-dynamically-set-the-battery-level-configuration;customer-replaces-the-battery-in-selected-locations",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1852800,
              "status": "passed"
            },
            "line": 22,
            "name": "the system has identified a logger in a location for battery replacement",
            "match": {
              "location": "stepdefinition.replace()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 939000,
              "status": "passed"
            },
            "line": 23,
            "name": "the customer initiates the battery replacement process",
            "match": {
              "location": "stepdefinition.Set()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 604100,
              "status": "passed"
            },
            "line": 24,
            "name": "the system should update the battery with a new one",
            "match": {
              "location": "stepdefinition.update()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 509700,
              "status": "passed"
            },
            "line": 25,
            "name": "the logger should resume normal operation",
            "match": {
              "location": "stepdefinition.resume()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Battery Replacements and Dynamically set the battery level configuration",
    "description": "",
    "id": "battery-replacements-and-dynamically-set-the-battery-level-configuration",
    "keyword": "Feature",
    "uri": "file:src/test/resources/feature/Test_1.feature",
    "tags": []
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2023-11-29T15:04:34.678Z",
        "line": 5,
        "name": "createToken for Customer user and verify Status as \u0027200\u0027",
        "description": "",
        "id": "token-generation;createtoken-for-customer-user-and-verify-status-as--200-",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1958138700,
              "status": "passed"
            },
            "line": 6,
            "name": "Create the Token for customer user",
            "match": {
              "location": "stepdefinition.createToken()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 418800,
              "status": "passed"
            },
            "line": 7,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1886200,
              "status": "passed"
            },
            "line": 8,
            "name": "Return the Status code as \"200\" and verify the status code should be \"200\" in case of \"Token Generation\"",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 27
                },
                {
                  "val": "200",
                  "offset": 70
                },
                {
                  "val": "Token Generation",
                  "offset": 87
                }
              ],
              "location": "stepdefinition.returnAndVerifyStatusCode(int,int,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 362500,
              "status": "passed"
            },
            "line": 9,
            "name": "Return the Status Line as \"HTTP/1.1 200 OK\" and verify the status Line should be \"HTTP/1.1 200 OK\" in case of \"Token Generation\"",
            "match": {
              "arguments": [
                {
                  "val": "HTTP/1.1 200 OK",
                  "offset": 27
                },
                {
                  "val": "HTTP/1.1 200 OK",
                  "offset": 82
                },
                {
                  "val": "Token Generation",
                  "offset": 111
                }
              ],
              "location": "stepdefinition.returnAndVerifyStatusLine(String,String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48749200,
              "status": "passed"
            },
            "line": 11,
            "name": "Get the Token Value",
            "match": {
              "location": "stepdefinition.getToken()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@TokenGeneration"
          },
          {
            "name": "@Generate_and_Get_Token_Value"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:36.695Z",
        "line": 22,
        "name": "This is to verify the token bearer in case of Invalid Invalid_UserName",
        "description": "",
        "id": "token-generation;this-is-to-verify-the-token-bearer-in-case-of-invalid-\u003cscenario\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 319195000,
              "status": "passed"
            },
            "line": 15,
            "name": "user calls the Token api \"Invalid_UserName\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid_UserName\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinition.Token_api(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 318000,
              "status": "passed"
            },
            "line": 16,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 191500,
              "status": "passed"
            },
            "line": 17,
            "name": "user should get response status code as \"401\"",
            "match": {
              "arguments": [
                {
                  "val": "\"401\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 223100,
              "status": "passed"
            },
            "line": 18,
            "name": "response should contain \"Invalid user credentials\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid user credentials\"",
                  "offset": 24
                }
              ],
              "location": "stepdefinition.Invalid_Response(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TokenGeneration"
          },
          {
            "name": "@createdToken_UnsingInvalidCredentials"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:37.019Z",
        "line": 23,
        "name": "This is to verify the token bearer in case of Invalid Invalid Password",
        "description": "",
        "id": "token-generation;this-is-to-verify-the-token-bearer-in-case-of-invalid-\u003cscenario\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 362651900,
              "status": "passed"
            },
            "line": 15,
            "name": "user calls the Token api \"Invalid Password\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid Password\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinition.Token_api(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 334800,
              "status": "passed"
            },
            "line": 16,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 364200,
              "status": "passed"
            },
            "line": 17,
            "name": "user should get response status code as \"401\"",
            "match": {
              "arguments": [
                {
                  "val": "\"401\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 271600,
              "status": "passed"
            },
            "line": 18,
            "name": "response should contain \"Invalid user credentials\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid user credentials\"",
                  "offset": 24
                }
              ],
              "location": "stepdefinition.Invalid_Response(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TokenGeneration"
          },
          {
            "name": "@createdToken_UnsingInvalidCredentials"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:37.384Z",
        "line": 24,
        "name": "This is to verify the token bearer in case of Invalid Invalid Client ID",
        "description": "",
        "id": "token-generation;this-is-to-verify-the-token-bearer-in-case-of-invalid-\u003cscenario\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 309928100,
              "status": "passed"
            },
            "line": 15,
            "name": "user calls the Token api \"Invalid Client ID\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid Client ID\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinition.Token_api(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 154900,
              "status": "passed"
            },
            "line": 16,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 444400,
              "status": "passed"
            },
            "line": 17,
            "name": "user should get response status code as \"401\"",
            "match": {
              "arguments": [
                {
                  "val": "\"401\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 449300,
              "status": "passed"
            },
            "line": 18,
            "name": "response should contain \"Invalid client or Invalid client credentials\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid client or Invalid client credentials\"",
                  "offset": 24
                }
              ],
              "location": "stepdefinition.Invalid_Response(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TokenGeneration"
          },
          {
            "name": "@createdToken_UnsingInvalidCredentials"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:37.697Z",
        "line": 25,
        "name": "This is to verify the token bearer in case of Invalid Invalid Grant_Type",
        "description": "",
        "id": "token-generation;this-is-to-verify-the-token-bearer-in-case-of-invalid-\u003cscenario\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 293232500,
              "status": "passed"
            },
            "line": 15,
            "name": "user calls the Token api \"Invalid Grant_Type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Invalid Grant_Type\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinition.Token_api(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 147600,
              "status": "passed"
            },
            "line": 16,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 146100,
              "status": "passed"
            },
            "line": 17,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 183000,
              "status": "passed"
            },
            "line": 18,
            "name": "response should contain \"Unsupported grant_type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Unsupported grant_type\"",
                  "offset": 24
                }
              ],
              "location": "stepdefinition.Invalid_Response(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TokenGeneration"
          },
          {
            "name": "@createdToken_UnsingInvalidCredentials"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:37.993Z",
        "line": 37,
        "name": "This is to verify the token bearer in case of Invalid Unsupported Conetent_Type",
        "description": "",
        "id": "token-generation;this-is-to-verify-the-token-bearer-in-case-of-invalid-\u003cscenario\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 295270600,
              "status": "passed"
            },
            "line": 30,
            "name": "user calls the Token api \"Unsupported Conetent_Type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Unsupported Conetent_Type\"",
                  "offset": 25
                }
              ],
              "location": "stepdefinition.Token_api(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 689700,
              "status": "passed"
            },
            "line": 31,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 830200,
              "status": "passed"
            },
            "line": 32,
            "name": "user should get response status code as \"415\"",
            "match": {
              "arguments": [
                {
                  "val": "\"415\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 649600,
              "status": "passed"
            },
            "line": 33,
            "name": "response should contain error \"RESTEASY003065: Cannot consume content type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"RESTEASY003065: Cannot consume content type\"",
                  "offset": 30
                }
              ],
              "location": "stepdefinition.Invalid_Content_Type(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@TokenGeneration"
          },
          {
            "name": "@createdToken_using_Unsupported_ContentType"
          }
        ]
      }
    ],
    "name": "Token Generation",
    "description": "",
    "id": "token-generation",
    "keyword": "Feature",
    "uri": "file:src/test/resources/feature/Test_2.feature",
    "tags": [
      {
        "name": "@TokenGeneration",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2023-11-29T15:04:38.294Z",
        "line": 13,
        "name": "Create Logger for MR_812P",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-\u003cloggertype\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 515747100,
              "status": "passed"
            },
            "line": 6,
            "name": "Call lORA configuration API to create Logger using \"MR_812P\" and assert max 16 HEX chars only",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_812P\"",
                  "offset": 51
                }
              ],
              "location": "stepdefinition.Create_logger_Type(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 657400,
              "status": "passed"
            },
            "line": 7,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1013400,
              "status": "passed"
            },
            "line": 8,
            "name": "user should get response status code as \"201\"",
            "match": {
              "arguments": [
                {
                  "val": "\"201\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 392100,
              "status": "passed"
            },
            "line": 9,
            "name": "Return the Status Line as \"HTTP/1.1 201 Created\" and verify the status Line should be \"HTTP/1.1 201 Created\" in case of \"Creation of Loggers\"",
            "match": {
              "arguments": [
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 27
                },
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 87
                },
                {
                  "val": "Creation of Loggers",
                  "offset": 121
                }
              ],
              "location": "stepdefinition.returnAndVerifyStatusLine(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:38.827Z",
        "line": 14,
        "name": "Create Logger for MR_810T",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-\u003cloggertype\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 315839000,
              "status": "passed"
            },
            "line": 6,
            "name": "Call lORA configuration API to create Logger using \"MR_810T\" and assert max 16 HEX chars only",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_810T\"",
                  "offset": 51
                }
              ],
              "location": "stepdefinition.Create_logger_Type(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 252200,
              "status": "passed"
            },
            "line": 7,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 193200,
              "status": "passed"
            },
            "line": 8,
            "name": "user should get response status code as \"201\"",
            "match": {
              "arguments": [
                {
                  "val": "\"201\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 512400,
              "status": "passed"
            },
            "line": 9,
            "name": "Return the Status Line as \"HTTP/1.1 201 Created\" and verify the status Line should be \"HTTP/1.1 201 Created\" in case of \"Creation of Loggers\"",
            "match": {
              "arguments": [
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 27
                },
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 87
                },
                {
                  "val": "Creation of Loggers",
                  "offset": 121
                }
              ],
              "location": "stepdefinition.returnAndVerifyStatusLine(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:39.149Z",
        "line": 27,
        "name": "Create Logger for negative Using Non-Hex 16 chars key",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 289592200,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"MR_812P\" and \"012345QRT89AFBCD\" against \"Using Non-Hex 16 chars key\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_812P\"",
                  "offset": 51
                },
                {
                  "val": "\"012345QRT89AFBCD\"",
                  "offset": 65
                },
                {
                  "val": "\"Using Non-Hex 16 chars key\"",
                  "offset": 92
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 158900,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 142700,
              "status": "passed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1067000,
              "status": "passed"
            },
            "line": 22,
            "name": "response should contain message \"Hex id 01YU45QRT89AFBCD  couldn\u0027t be parsed\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Hex id 01YU45QRT89AFBCD  couldn\u0027t be parsed\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:39.450Z",
        "line": 28,
        "name": "Create Logger for negative Using Non-Hex 16 chars key",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 285859800,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"MR_810T\" and \"01YU45QRT89AFBCD\" against \"Using Non-Hex 16 chars key\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_810T\"",
                  "offset": 51
                },
                {
                  "val": "\"01YU45QRT89AFBCD\"",
                  "offset": 65
                },
                {
                  "val": "\"Using Non-Hex 16 chars key\"",
                  "offset": 92
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 356000,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 460900,
              "status": "passed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 248000,
              "status": "passed"
            },
            "line": 22,
            "name": "response should contain message \"Hex id 01YU45QRT89AFBCD  couldn\u0027t be parsed\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Hex id 01YU45QRT89AFBCD  couldn\u0027t be parsed\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:39.740Z",
        "line": 29,
        "name": "Create Logger for negative Using 17 Hex Chars Key",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;4",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 306221200,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"MR_812P\" and \"0123456789AFBCDE1\" against \"Using 17 Hex Chars Key\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_812P\"",
                  "offset": 51
                },
                {
                  "val": "\"0123456789AFBCDE1\"",
                  "offset": 65
                },
                {
                  "val": "\"Using 17 Hex Chars Key\"",
                  "offset": 93
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 315100,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: verify Expected400201\nExpected: \u003c201\u003e\n     but: was \u003c400\u003e\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat Common.ApiHelper.assertStatusCode(ApiHelper.java:165)\r\n\tat PageFactory.Implementation_Class.status_code(Implementation_Class.java:129)\r\n\tat StepDefinition.stepdefinition.Invalid_cases(stepdefinition.java:62)\r\n\tat ✽.user should get response status code as \"400\"(file:src/test/resources/feature/Test_3.feature:21)\r\n",
              "duration": 2537200,
              "status": "failed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 251900,
              "status": "skipped"
            },
            "line": 22,
            "name": "response should contain message \"Hex id 0123456789AFBCDE1 couldn\u0027t be parsed\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Hex id 0123456789AFBCDE1 couldn\u0027t be parsed\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:40.062Z",
        "line": 30,
        "name": "Create Logger for negative Using 20 Hex Chars Key",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;5",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 292077600,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"MR_810T\" and \"0123456789AFBCDE1234\" against \"Using 20 Hex Chars Key\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_810T\"",
                  "offset": 51
                },
                {
                  "val": "\"0123456789AFBCDE1234\"",
                  "offset": 65
                },
                {
                  "val": "\"Using 20 Hex Chars Key\"",
                  "offset": 96
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 135000,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 130400,
              "status": "passed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 177700,
              "status": "passed"
            },
            "line": 22,
            "name": "response should contain message \"Hex id 0123456789AFBCDE1234 couldn\u0027t be parsed\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Hex id 0123456789AFBCDE1234 couldn\u0027t be parsed\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:40.356Z",
        "line": 31,
        "name": "Create Logger for negative Using 0 chars Hex Key",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;6",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 299200900,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"MR_810T\" and \"\" against \"Using 0 chars Hex Key\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_810T\"",
                  "offset": 51
                },
                {
                  "val": "\"\"",
                  "offset": 65
                },
                {
                  "val": "\"Using 0 chars Hex Key\"",
                  "offset": 76
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 138800,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 149000,
              "status": "passed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 291000,
              "status": "passed"
            },
            "line": 22,
            "name": "response should contain message \"Hex id   couldn\u0027t be parsed\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Hex id   couldn\u0027t be parsed\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:40.658Z",
        "line": 32,
        "name": "Create Logger for negative Using 0 chars Hex Key",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;7",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 283291400,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"MR_812P\" and \"\" against \"Using 0 chars Hex Key\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_812P\"",
                  "offset": 51
                },
                {
                  "val": "\"\"",
                  "offset": 65
                },
                {
                  "val": "\"Using 0 chars Hex Key\"",
                  "offset": 76
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 147500,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 202900,
              "status": "passed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 314900,
              "status": "passed"
            },
            "line": 22,
            "name": "response should contain message \"Hex id   couldn\u0027t be parsed\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Hex id   couldn\u0027t be parsed\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:40.944Z",
        "line": 33,
        "name": "Create Logger for negative Using Invalid Logger Type",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;8",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 299042400,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"810T\" and \"0123456789AFBCDE\" against \"Using Invalid Logger Type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"810T\"",
                  "offset": 51
                },
                {
                  "val": "\"0123456789AFBCDE\"",
                  "offset": 62
                },
                {
                  "val": "\"Using Invalid Logger Type\"",
                  "offset": 89
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 237400,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: verify Expected400500\nExpected: \u003c500\u003e\n     but: was \u003c400\u003e\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat Common.ApiHelper.assertStatusCode(ApiHelper.java:165)\r\n\tat PageFactory.Implementation_Class.status_code(Implementation_Class.java:129)\r\n\tat StepDefinition.stepdefinition.Invalid_cases(stepdefinition.java:62)\r\n\tat ✽.user should get response status code as \"400\"(file:src/test/resources/feature/Test_3.feature:21)\r\n",
              "duration": 300000,
              "status": "failed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 291500,
              "status": "skipped"
            },
            "line": 22,
            "name": "response should contain message \"Server Error: Cannot deserialize value of type `ch.skycell.repository.entities.enums.DeviceType` from String \\\"810T\\\": not one of the values accepted for Enum class: [MR_813, MR_812P, MR_815, CL_TT_7100, MR_810T, SKYCELL_SAVY_BLE, CARTASENSE_M, CARTASENSE, MR_814, SKYCELL, LIBERO_GL, CL_BUTTERFLY]\n at [Source: (io.quarkus.vertx.http.runtime.VertxInputStream); line: 1, column: 15] (through reference chain: ch.skycell.lora.configuration.dto.LoraConfigurationDto[\\\"loggerType\\\"])\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Server Error: Cannot deserialize value of type `ch.skycell.repository.entities.enums.DeviceType` from String \\\"810T\\\": not one of the values accepted for Enum class: [MR_813, MR_812P, MR_815, CL_TT_7100, MR_810T, SKYCELL_SAVY_BLE, CARTASENSE_M, CARTASENSE, MR_814, SKYCELL, LIBERO_GL, CL_BUTTERFLY]\n at [Source: (io.quarkus.vertx.http.runtime.VertxInputStream); line: 1, column: 15] (through reference chain: ch.skycell.lora.configuration.dto.LoraConfigurationDto[\\\"loggerType\\\"])\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:41.248Z",
        "line": 34,
        "name": "Create Logger for negative Using without Logger Type",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-negative-\u003cscenario\u003e;;9",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 300544800,
              "status": "passed"
            },
            "line": 19,
            "name": "Call lORA configuration API to create Logger using \"\" and \"0123456789AFBCDE\" against \"Using without Logger Type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"\"",
                  "offset": 51
                },
                {
                  "val": "\"0123456789AFBCDE\"",
                  "offset": 58
                },
                {
                  "val": "\"Using without Logger Type\"",
                  "offset": 85
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 332600,
              "status": "passed"
            },
            "line": 20,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: verify Expected400500\nExpected: \u003c500\u003e\n     but: was \u003c400\u003e\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat Common.ApiHelper.assertStatusCode(ApiHelper.java:165)\r\n\tat PageFactory.Implementation_Class.status_code(Implementation_Class.java:129)\r\n\tat StepDefinition.stepdefinition.Invalid_cases(stepdefinition.java:62)\r\n\tat ✽.user should get response status code as \"400\"(file:src/test/resources/feature/Test_3.feature:21)\r\n",
              "duration": 391400,
              "status": "failed"
            },
            "line": 21,
            "name": "user should get response status code as \"400\"",
            "match": {
              "arguments": [
                {
                  "val": "\"400\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 121000,
              "status": "skipped"
            },
            "line": 22,
            "name": "response should contain message \"Server Error: Cannot coerce empty String (\\\"\\\") to `ch.skycell.repository.entities.enums.DeviceType` value (but could if coercion was enabled using `CoercionConfig`)\n at [Source: (io.quarkus.vertx.http.runtime.VertxInputStream); line: 1, column: 15] (through reference chain: ch.skycell.lora.configuration.dto.LoraConfigurationDto[\\\"loggerType\\\"])\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Server Error: Cannot coerce empty String (\\\"\\\") to `ch.skycell.repository.entities.enums.DeviceType` value (but could if coercion was enabled using `CoercionConfig`)\n at [Source: (io.quarkus.vertx.http.runtime.VertxInputStream); line: 1, column: 15] (through reference chain: ch.skycell.lora.configuration.dto.LoraConfigurationDto[\\\"loggerType\\\"])\"",
                  "offset": 32
                }
              ],
              "location": "stepdefinition.messages(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Create_Logger_for_Type_1_and_Type_2_All_negative_cases"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:41.552Z",
        "line": 46,
        "name": "Create Logger for Invalid Invalid Content Type",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-invalid-\u003cinvalid-content\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 377780900,
              "status": "passed"
            },
            "line": 38,
            "name": "Call lORA configuration API to create Logger using \"MR_812P\" and \"012345678\" against \"Invalid Content Type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_812P\"",
                  "offset": 51
                },
                {
                  "val": "\"012345678\"",
                  "offset": 65
                },
                {
                  "val": "\"Invalid Content Type\"",
                  "offset": 85
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 187300,
              "status": "passed"
            },
            "line": 39,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 363800,
              "status": "passed"
            },
            "line": 40,
            "name": "user should get response status code as \"415\"",
            "match": {
              "arguments": [
                {
                  "val": "\"415\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 130000,
              "status": "passed"
            },
            "line": 41,
            "name": "response should contain error \"RESTEASY003065: Cannot consume content type\"",
            "match": {
              "arguments": [
                {
                  "val": "\"RESTEASY003065: Cannot consume content type\"",
                  "offset": 30
                }
              ],
              "location": "stepdefinition.Invalid_Content_Type(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Invalid_Content_type"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:41.933Z",
        "line": 56,
        "name": "Create Logger for Invalid Auth Invalid API KEY",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-invalid-auth-\u003cauth-scenario\u003e;;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 284479100,
              "status": "passed"
            },
            "line": 50,
            "name": "Call lORA configuration API to create Logger using \"MR_810T\" and \"012345678\" against \"Invalid API KEY\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_810T\"",
                  "offset": 51
                },
                {
                  "val": "\"012345678\"",
                  "offset": 65
                },
                {
                  "val": "\"Invalid API KEY\"",
                  "offset": 85
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 223600,
              "status": "passed"
            },
            "line": 51,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 163500,
              "status": "passed"
            },
            "line": 52,
            "name": "user should get response status code as \"403\"",
            "match": {
              "arguments": [
                {
                  "val": "\"403\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Invalid_Authorization"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:42.220Z",
        "line": 57,
        "name": "Create Logger for Invalid Auth Empty API KEy",
        "description": "",
        "id": "logger-creation-functionality;create-logger-for-invalid-auth-\u003cauth-scenario\u003e;;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 291905200,
              "status": "passed"
            },
            "line": 50,
            "name": "Call lORA configuration API to create Logger using \"MR_812P\" and \"012345678\" against \"Empty API KEy\"",
            "match": {
              "arguments": [
                {
                  "val": "\"MR_812P\"",
                  "offset": 51
                },
                {
                  "val": "\"012345678\"",
                  "offset": 65
                },
                {
                  "val": "\"Empty API KEy\"",
                  "offset": 85
                }
              ],
              "location": "stepdefinition.Positive_Negative_cases(String,String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 163000,
              "status": "passed"
            },
            "line": 51,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 128700,
              "status": "passed"
            },
            "line": 52,
            "name": "user should get response status code as \"403\"",
            "match": {
              "arguments": [
                {
                  "val": "\"403\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@Logger_Functionality"
          },
          {
            "name": "@Invalid_Authorization"
          }
        ]
      }
    ],
    "name": "Logger Creation Functionality",
    "description": "",
    "id": "logger-creation-functionality",
    "keyword": "Feature",
    "uri": "file:src/test/resources/feature/Test_3.feature",
    "tags": [
      {
        "name": "@Logger_Functionality",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2023-11-29T15:04:42.513Z",
        "line": 13,
        "name": "Send data to server against the Logger number \"Create sensor data for MR_812P\"",
        "description": "",
        "id": "sensor-data-creation;send-data-to-server-against-the-logger-number-\"\u003cscenario\u003e\";;2",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 297178600,
              "status": "passed"
            },
            "line": 6,
            "name": "Call sensor API to create Logger using LoggerNumber \"Create sensor data for MR_812P\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Create sensor data for MR_812P\"",
                  "offset": 52
                }
              ],
              "location": "stepdefinition.Send_Sensor_Data(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 203200,
              "status": "passed"
            },
            "line": 7,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 326200,
              "status": "passed"
            },
            "line": 8,
            "name": "user should get response status code as \"201\"",
            "match": {
              "arguments": [
                {
                  "val": "\"201\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 187700,
              "status": "passed"
            },
            "line": 9,
            "name": "Return the Status Line as \"HTTP/1.1 201 Created\" and verify the status Line should be \"HTTP/1.1 201 Created\" in case of \"Creation of Loggers\"",
            "match": {
              "arguments": [
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 27
                },
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 87
                },
                {
                  "val": "Creation of Loggers",
                  "offset": 121
                }
              ],
              "location": "stepdefinition.returnAndVerifyStatusLine(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@Test_4_Functionality"
          },
          {
            "name": "@Logger_sending_Data_to_server"
          }
        ]
      },
      {
        "start_timestamp": "2023-11-29T15:04:42.815Z",
        "line": 14,
        "name": "Send data to server against the Logger number \"Create sensor data for MR_810T\"",
        "description": "",
        "id": "sensor-data-creation;send-data-to-server-against-the-logger-number-\"\u003cscenario\u003e\";;3",
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 300433700,
              "status": "passed"
            },
            "line": 6,
            "name": "Call sensor API to create Logger using LoggerNumber \"Create sensor data for MR_810T\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Create sensor data for MR_810T\"",
                  "offset": 52
                }
              ],
              "location": "stepdefinition.Send_Sensor_Data(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146400,
              "status": "passed"
            },
            "line": 7,
            "name": "Return the response Body",
            "match": {
              "location": "stepdefinition.returningResponseBody()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 247500,
              "status": "passed"
            },
            "line": 8,
            "name": "user should get response status code as \"201\"",
            "match": {
              "arguments": [
                {
                  "val": "\"201\"",
                  "offset": 40
                }
              ],
              "location": "stepdefinition.Invalid_cases(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 131900,
              "status": "passed"
            },
            "line": 9,
            "name": "Return the Status Line as \"HTTP/1.1 201 Created\" and verify the status Line should be \"HTTP/1.1 201 Created\" in case of \"Creation of Loggers\"",
            "match": {
              "arguments": [
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 27
                },
                {
                  "val": "HTTP/1.1 201 Created",
                  "offset": 87
                },
                {
                  "val": "Creation of Loggers",
                  "offset": 121
                }
              ],
              "location": "stepdefinition.returnAndVerifyStatusLine(String,String,String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@Test_4_Functionality"
          },
          {
            "name": "@Logger_sending_Data_to_server"
          }
        ]
      }
    ],
    "name": "Sensor Data creation",
    "description": "",
    "id": "sensor-data-creation",
    "keyword": "Feature",
    "uri": "file:src/test/resources/feature/Test_4.feature",
    "tags": [
      {
        "name": "@Test_4_Functionality",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]